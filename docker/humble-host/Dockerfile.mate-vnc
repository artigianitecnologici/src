# Copyright 2025 robotics-3d.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: Ferrarini Fabio
# Email : ferrarini09@gmail.com
# Base image: 
# Nomefile Dockerfile.mate-vnc

FROM ubuntu:jammy 
# -20240808

ARG TARGETPLATFORM
#
ARG Dynamixel=false
ARG Gazebo=false
ARG Robot=2wd


# Install ROS
ENV ROS_DISTRO humble
# desktop or ros-base
ARG INSTALL_PACKAGE=desktop

#
LABEL maintainer="ferrarini09@gmail.com>"
SHELL ["/bin/bash", "-c"]

# Upgrade OS
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Install Ubuntu Mate desktop
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        ubuntu-mate-desktop && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*


 # Add Package
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        tigervnc-standalone-server tigervnc-common \
        supervisor wget curl gosu git sudo python3-pip tini tmux netcat nano \
        build-essential vim sudo lsb-release locales \
        bash-completion tzdata terminator dos2unix shellinabox \
        chromium-browser fonts-liberation v4l-utils && \
        apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*


# noVNC e Websockify
RUN git clone https://github.com/novnc/noVNC.git /usr/lib/novnc
RUN pip install git+https://github.com/novnc/websockify.git@v0.11.0
RUN ln -s /usr/lib/novnc/vnc.html /usr/lib/novnc/index.html
# Set remote resize function enabled by default
RUN sed -i "s/UI.initSetting('resize', 'off');/UI.initSetting('resize', 'remote');/g" /usr/lib/novnc/app/ui.js

# Disable auto update and crash report
RUN sed -i 's/Prompt=.*/Prompt=never/' /etc/update-manager/release-upgrades
RUN sed -i 's/enabled=1/enabled=0/g' /etc/default/apport

# # Install Firefox
# RUN DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:mozillateam/ppa -y && \
#     echo 'Package: *' > /etc/apt/preferences.d/mozilla-firefox && \
#     echo 'Pin: release o=LP-PPA-mozillateam' >> /etc/apt/preferences.d/mozilla-firefox && \
#     echo 'Pin-Priority: 1001' >> /etc/apt/preferences.d/mozilla-firefox && \
#     apt-get update -q && \
#     apt-get install -y \
#     firefox && \
#     apt-get autoclean && \
#     apt-get autoremove && \
#     rm -rf /var/lib/apt/lists/*

# Install VSCodium
RUN wget https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
    -O /usr/share/keyrings/vscodium-archive-keyring.asc && \
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.asc ] https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main' \
    | tee /etc/apt/sources.list.d/vscodium.list && \
    apt-get update -q && \
    apt-get install -y codium && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# --- CREATE USER 'ubuntu' ---
RUN echo -e "\033[1;32m=== Create user ubuntu \033[0m"
RUN useradd -m -s /bin/bash ubuntu && \
    echo "ubuntu:ubuntu" | chpasswd && \
    usermod -aG sudo ubuntu && \
    echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# --- INSTALL ROS 2 ---

RUN apt-get update -q && \
    apt-get install -y curl gnupg2 lsb-release && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update -q && \
    apt-get install -y ros-${ROS_DISTRO}-${INSTALL_PACKAGE} \
    python3-argcomplete \
    python3-colcon-common-extensions \
    python3-rosdep python3-vcstool && \
    rosdep init && \
    rm -rf /var/lib/apt/lists/*


USER ubuntu
RUN rosdep update
USER root


RUN if [ "$Gazebo" = "true" ]; then \
    apt-get update -q && \
    apt-get install -y \
        gazebo \
        ros-${ROS_DISTRO}-gazebo-ros-pkgs \
        ros-${ROS_DISTRO}-ros-gz && \
    rm -rf /var/lib/apt/lists/*; \
    fi
   
USER ubuntu
RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src

WORKDIR /home/ubuntu/marrtinorobot2_ws

# --- Configura ROS2 dentro marrtinorobot2_ws ---
RUN source /opt/ros/${ROS_DISTRO}/setup.bash && \
    colcon build --symlink-install && \
    source install/setup.bash
   
# --- Installazione di pacchetti ROS aggiuntivi ---
RUN sudo apt-get update -q && \
    sudo apt-get install -y \
        ros-humble-depthai-ros \ 
        ros-humble-rtabmap-ros \
        ros-humble-cartographer \
        ros-humble-cartographer-ros \
        ros-humble-navigation2 \
        ros-humble-nav2-bringup \
        ros-humble-v4l2-camera \
        ros-humble-camera-calibration-parsers \
        ros-humble-camera-info-manager \
        ros-humble-launch-testing-ament-cmake \
        ros-humble-robot-localization \
        ros-humble-rosbridge-server \
        ros-humble-joy \
        ros-humble-rplidar-ros \
        ros-humble-joint-state-publisher \  
        ros-humble-pointcloud-to-laserscan \
        ros-humble-rosbridge-suite  \
        ros-humble-controller-manager && \
    sudo apt-get autoclean && \
    sudo apt-get autoremove && \
    sudo rm -rf /var/lib/apt/lists/*
#  ros-humble-localization \

#
# INSTALLAZIONE MICROROS
##
WORKDIR /home/ubuntu/marrtinorobot2_ws
RUN git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
RUN sudo apt-get update \
        && rosdep update --rosdistro=${ROS_DISTRO} \
        && rosdep install --rosdistro=${ROS_DISTRO} --from-paths src -iry --os=ubuntu:$(lsb_release -sc) --skip-keys micro_ros_agent \
    && sudo rm -rf /var/lib/apt/lists/*

RUN source /opt/ros/$ROS_DISTRO/setup.bash \
    && colcon build --packages-select micro_ros_setup

RUN source /opt/ros/$ROS_DISTRO/setup.bash  \
    && source /home/ubuntu/marrtinorobot2_ws/install/setup.bash \
    && ros2 run micro_ros_setup create_agent_ws.sh

RUN source /opt/ros/$ROS_DISTRO/setup.bash \
    && source /home/ubuntu/marrtinorobot2_ws/install/setup.bash \
    && ros2 run micro_ros_setup build_agent.sh

RUN source /opt/ros/$ROS_DISTRO/setup.bash \
    && colcon build
##
# EOF INSTALLAZIONE MICROROS  
##
RUN echo -e "\033[1;32mInstall Repository MARRtino Robot 2 \033[0m"
# --- Clona repository ---# Installazione di pacchetti e repository MARRtino
RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \ 
mkdir -p /home/ubuntu/src && \
cd /home/ubuntu/src && \
git clone https://github.com/marrtino/MARRtinoROS2 . --filter=tree:0

WORKDIR /home/ubuntu/marrtinorobot2_ws/src
RUN cd /home/ubuntu/marrtinorobot2_ws/src  && \ 
    ln -s /home/ubuntu/src/apriltag_ros . && \
    ln -s /home/ubuntu/src/DynamixelSDK . && \
    ln -s /home/ubuntu/src/dynamixel-workbench . && \
    ln -s /home/ubuntu/src/dynamixel-workbench-msgs .  && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_base . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_bringup . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_description . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_webinterface . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_navigation . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_vision . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_voice . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_cartographer . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_dynamixel . && \
    ln -s /home/ubuntu/src/m-explore-ros2/explore . && \
    ln -s /home/ubuntu/src/ldlidar_stl_ros2 . && \
    ln -s /home/ubuntu/src/sllidar_ros2 . && \
    ln -s /home/ubuntu/src/depthai-ros . && \
    ln -s /home/ubuntu/src/vizanti . 

#  ln -s /home/ubuntu/src/depthai-ros-examples . && \
# --- Costruzione del workspace ---
WORKDIR /home/ubuntu/marrtinorobot2_ws

# RUN apt-get update && apt-get install -y software-properties-common && \
#     add-apt-repository universe && apt-get update
 
# --- Costruzione del workspace ---
WORKDIR /home/ubuntu/marrtinorobot2_ws
RUN cd /home/ubuntu/marrtinorobot2_ws && \
    cp /home/ubuntu/src/install/script/* .

RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
    colcon build  && \
    source /home/ubuntu/marrtinorobot2_ws/install/setup.bash

# --- Configura Gazebo se abilitato ---
RUN if [ "$Gazebo" = "true" ]; then \
    sudo apt-get update -q && \
    sudo apt-get install -y gazebo ros-${ROS_DISTRO}-gazebo-ros-pkgs ros-${ROS_DISTRO}-ros-gz && \
    rm -rf /var/lib/apt/lists/*; \
    fi




RUN cd /home/ubuntu/marrtinorobot2_ws && \
    cp /home/ubuntu/src/install/script/* .

USER root

RUN apt-get update -q && \
    apt-get install -y \
    mpg321 sox  libttspico-utils 
# Aggiorna il sistema e installa pacchetti di base
RUN apt-get update && apt-get install -y \
    python3-pip \
    python3-flask \
    python3-opencv \
    ros-humble-apriltag \
    ros-humble-joy-linux \
    ros-humble-cv-bridge \
    ros-humble-laser-filters \
    ros-humble-web-video-server && \
    apt-get clean && rm -rf /var/lib/apt/lists/*



# Installa opencv-python tramite pip
RUN pip3 install opencv-python gtts opencv-python-headless dynamixel-sdk pydub  websockets 

RUN apt-get update && apt-get install -y \
    portaudio19-dev 

RUN pip3 install  vosk sounddevice requests
   
RUN apt-get update && apt-get install -y \
    python3-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg libavdevice-dev

RUN pip3 install sounddevice soundfile

# Assicura compatibilità di numpy
RUN pip uninstall numpy -y && pip install numpy==1.26.4

USER ubuntu
# Aggiorna rosdep e installa le dipendenze del workspace ROS 2
RUN echo -e "\033[1;32m=== Update rosdep \033[0m"
RUN rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y


USER root
WORKDIR /home/ubuntu

    
RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
    colcon build  && \
    source /home/ubuntu/marrtinorobot2_ws/install/setup.bash

COPY disable-screen-saver.sh /home/ubuntu/disable-screen-saver.sh


COPY setup_environment.sh /home/ubuntu/setup_environment.sh  
# RUN chmod +x /home/ubuntu/setup_environment.sh && /home/ubuntu/setup_environment.sh; \
 

# COPY setup_environment.sh /home/ubuntu/setup_environment.sh 
RUN chmod +x /home/ubuntu/setup_environment.sh && /home/ubuntu/setup_environment.sh


RUN if [ "$Gazebo" = "true" ]; then \
    echo "export GAZEBO_MODEL_PATH=~/.gazebo/models" && \
    echo "export GAZEBO_RESOURCE_PATH=~/.gazebo" ; \
    fi

# Copia      
# Enable apt-get completion after running `apt-get update` in the container
RUN rm /etc/apt/apt.conf.d/docker-clean

COPY ./entrypoint.sh /
RUN dos2unix /entrypoint.sh
ENTRYPOINT [ "/bin/bash", "-c", "/entrypoint.sh" ]


ENV USER ubuntu
ENV PASSWD ubuntu


